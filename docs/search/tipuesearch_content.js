var tipuesearch = {"pages":[{"title":"Changelog","text":"  [1.6.0] - 2021-11-15   After upgrading run .\/bin\/install init in each installed environment, this will create bin\/config\/install.local.yml for that environement. Open install.local.yml and update the value for environment as appropriate. Continue using as before, omitting the script argument.   Added   You must add environment: ENV in bin\/config\/install.local.yml instead of providing it to the script. Do not commit install.local.yml to version control.   Changed   How local environment is identified.   Removed   Environment as a command argument. Instead of calling .\/bin\/install dev, you now just call .\/bin\/install after having added environment: dev to bin\/config\/install.local.yml.   [1.5.0] - 2019-09-19  Removed   Automatic composer self-update (use scripts instead) Automatic composer update Automatic drush config-import Certain config options removed; you may delete from install.local.yml:   path_to.web_root path_to.composer drush composer composer_self_update drupal_config_import    [1.4.0] - 2019-09-18  Removed   Automatic drupal cache clear. To achieve this functionality you should now use scripts  scripts:   post_install:     - cd web &amp;&amp; drush cr    [1.3.0] - 2019-09-18  Changed   If you wish to run the permission script as part of an installation then you should use the new scripts option. Add the following to your configuration to achieve the previous built-in functionality.  scripts:   post_install:     - sudo .\/bin\/perms apply    Removed   The use_sudo option. Built in integration with Website Permissions   [1.1.0]   To manage Composer dependencies you must add the path_to.composer value. See init\/install.yml for an example.  ","tags":"","url":"CHANGELOG.html"},{"title":"Website Install","text":"    Summary   Wraps repeated and multiple deployment tasks into one, convenient command. Simplifies the management of non-versioned files (settings, composer dependencies, etc.) for the different website environments, dev, staging, prod. Consists of two elements: scripts and files. May be executed as often as you like, as it simple ensures that everything is updated and in place.   Scripts  The configuration allows you to setup commands or scripts to run per environment so that when for example, you call install dev, the development scripts only will fire. As a suggestion, only include scripts and commands that support the aim of this project, that is to put files and state in place so that your website is ready. You can use these to do things like:  drush cr composer install drush config-import drush updb .\/bin\/perms apply git pull   If you are using Composer to manage dependencies, you can add the appropriate composer install command to the scripts configuration and then calling install &lt;role&gt; will grab the dependencies as well. You might do something like this so that production does not get dev dependencies.  scripts:   post_install_staging:     - composer install --no-dev   post_install_prod:     - composer install --no-dev   post_install_dev:     - composer install           Configuration  In install.yml are the script definitions. You may run specific bash commands before or after installation, for all or a given environment. Use the script configuration, see install.yml for how this works. This example runs three commands before installing in the dev environment. Each line must return 0 or installation will fail. Each line runs in a separate subshell having $APP_ROOT as the working directory.  scripts:   pre_install_dev:     - mkdir -p web\/modules\/dev     - rm web\/modules\/dev\/se_dev || return 0     - cd web\/modules\/dev\/ &amp;&amp; ln -s ..\/..\/..\/install\/default\/modules\/se_dev .       Alternately, you could point to files to be run instead. Each file must exit with 0 or installation will fail. Each file runs in a separate subshell having $APP_ROOT as the working directory.  scripts:   pre_install_dev:     - install\/scripts\/before.sh     - install\/scripts\/before.php   Files  The files element gives you the ability to define environment-specific files, which are then copied to the correct location when running install &lt;role&gt;. For example, a Drupal website has files that do not end up in version control: .htaccess, settings.local.php, etc. This project provides a means of putting those in source control by storing environment-specific versions of them in a directory and then copying the appropriate version to it's runtime location.  If a file already exists in it's runtime location, nothing happens, but if it's missing then the file is copied from the appropriate environment source.  Configuration  The basic configuration in install.yml consists of two lists. The master files and the destination paths. Notice the use of the token __ROLE, which will be substituted for the role. You must have the same number of items in each list.  master_dir: install\/default master_files:     - install.__ROLE.yml installed_files:     - bin\/config\/install.local.yml   Visit https:\/\/aklump.github.io\/website-install for full documentation.  Quick Start   Install in your repository root using cloudy pm-install aklump\/install. Create your master_dir to hold your source files, e.g. install\/default\/. Place source files in this folder. Open bin\/config\/install.local.yml and define your environment; do not add this file to source control. Open bin\/config\/install.yml and map your files. Define any scripts that you would like to associate with an environment.   Requirements  You must have Cloudy installed on your system to install this package.  Installation  The installation script above will generate the following structure where . is your repository root.  . \u251c\u2500\u2500 bin \u2502\u00a0\u00a0 \u251c\u2500\u2500 install -&gt; ..\/opt\/install\/install.sh \u2502\u00a0\u00a0 \u2514\u2500\u2500 config \u2502\u00a0\u00a0     \u251c\u2500\u2500 install.yml \u2502\u00a0\u00a0     \u2514\u2500\u2500 install.local.yml \u251c\u2500\u2500 opt \u2502   \u251c\u2500\u2500 cloudy \u2502   \u2514\u2500\u2500 aklump \u2502       \u2514\u2500\u2500 install \u2514\u2500\u2500 {public web root}   To Update   Update to the latest version from your repo root: cloudy pm-update aklump\/install   Configuration Files       Filename   Description   VCS       install.local.yml   Defines the local environment   no     install.yml   Configuration shared across all server environments: prod, staging, dev   yes     Usage  In the example above we would expect to find the following in source control:  . \u251c\u2500\u2500 bin \u2502\u00a0\u00a0 \u2514\u2500\u2500 config \u2514\u2500\u2500 install     \u2514\u2500\u2500 default         \u251c\u2500\u2500 install.dev.yml         \u251c\u2500\u2500 install.prod.yml         \u2514\u2500\u2500 install.staging.yml  When we ran this script with `prod` then we would have the following, where _bin\/config\/install.local.yml_ is a copy of _install\/default\/install.prod.yml_.   . \u251c\u2500\u2500 bin \u2502\u00a0\u00a0 \u2514\u2500\u2500 config \u2502\u00a0\u00a0     \u2514\u2500\u2500 install.local.yml \u2514\u2500\u2500 install     \u2514\u2500\u2500 default         \u251c\u2500\u2500 install.dev.yml         \u251c\u2500\u2500 install.prod.yml         \u2514\u2500\u2500 install.staging.yml    To see all commands use .\/bin\/install help   Contributing  If you find this project useful... please consider making a donation. ","tags":"","url":"README.html"},{"title":"Search Results","text":" ","tags":"","url":"search--results.html"}]};
